#!/bin/bash

set -e

REPO_FOLDER=$(realpath $1)

if [ ! -d "${REPO_FOLDER}" ]; then
    echo "Folder ${REPO_FOLDER} doesn't exist."
    exit 1
fi

# Generate the apt repo metadata
cd $REPO_FOLDER

mkdir -p dists/local/main/{binary-arm64,binary-amd64}

dpkg-scanpackages -m -a amd64 . /dev/null > dists/local/main/binary-amd64/Packages
dpkg-scanpackages -m -a arm64 . /dev/null > dists/local/main/binary-arm64/Packages
dpkg-scanpackages -m -a amd64 . /dev/null | gzip -9c > dists/local/main/binary-amd64/Packages.gz
dpkg-scanpackages -m -a arm64 . /dev/null | gzip -9c > dists/local/main/binary-arm64/Packages.gz
dpkg-scanpackages -m -a amd64 . /dev/null | xz -9 > dists/local/main/binary-amd64/Packages.xz
dpkg-scanpackages -m -a arm64 . /dev/null | xz -9 > dists/local/main/binary-arm64/Packages.xz

# generate the release file
cd "${REPO_FOLDER}/dists/local"

do_hash() {
    HASH_NAME=$1
    HASH_CMD=$2
    echo "${HASH_NAME}:"
    for f in $(find -type f -name "Packages*"); do
        f=$(echo $f | cut -c3-) # remove ./ prefix
        if [ "$f" = "Release" ]; then
            continue
        fi
        echo " $(${HASH_CMD} ${f}  | cut -d" " -f1) $(wc -c $f)"
    done
}

cat > Release << EOF
Origin: local repository
Label: localrepo
Suite: local
Codename: local
Version: 1.0
Architectures: amd64 arm64
Description: An local apt repository
Components: main
Date: $(date -Ru)
EOF

do_hash "MD5Sum" "md5sum" >> Release
do_hash "SHA1" "sha1sum" >> Release
do_hash "SHA256" "sha256sum" >> Release

# Generate Release signature
gpg -b --output Release.gpg  --armor Release

# Generate InRelease file
gpg --clearsign -o InRelease Release

# Export signing key
gpg --export $DEBMAIL > Release.key
gpg --export $DEBMAIL --armor > Release.asc

# Update local apt config
sudo cp Release.key /etc/apt/trusted.gpg.d/local.gpg
sudo bash -c "echo 'deb http://127.0.0.1:8000 local main' > /etc/apt/sources.list.d/local.list"

# print info text
echo "Local apt repoistory prepared in folder ${REPO_FOLDER}."
echo "The public key is stored as ${REPO_FOLDER}/dists/local/Release.key"
echo "The public key is armored stored as ${REPO_FOLDER}/dists/local/Release.asc"
echo "You can serve the folder e.g. with \"python -m http.server --directory ${REPO_FOLDER}\","
echo "and use the repository with the apt line:"
echo "deb http://127.0.0.1:8000 local main"
echo "You can use the repostory in your elbe images with:"
echo "<repodir signed-by="dists/local/Release.asc">${REPO_FOLDER} local main</repodir>"
echo "This XML tag will also serve the repository for you."
echo "Alternative, you can also serve the repoisitry with repo_serve"
echo "and add it with:"
echo "<url>"
echo "  <binary>http://LOCALMACHINE:8000 local main</binary>"
echo "  <source>http://LOCALMACHINE:8000 local main</source>"
echo "  <raw-key>"
cat "${REPO_FOLDER}/dists/local/Release.asc"
echo "  </raw-key>"
echo "</url>"

